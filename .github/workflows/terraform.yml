name: 'Terraform'
on:
  push:
    branches:
      - main
  release:
    types: [published]
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      # Environment configuration - modify these variables for your project
      TF_ROOT_PATH: './environments'
      GLOBAL_PATH: 'global'
      STAGING_PATH: 'staging'
      PRODUCTION_PATH: 'production'
      # Secret configuration
      SECRETS_PREFIX: 'terraform'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}

      - name: Determine environment
        id: environment
        run: |
          if [[ ${{ github.ref }} =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then 
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ENVIRONMENT_PATH=${{ env.PRODUCTION_PATH }}" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then 
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "ENVIRONMENT_PATH=${{ env.STAGING_PATH }}" >> $GITHUB_ENV
          else 
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ENVIRONMENT_PATH=${{ env.STAGING_PATH }}" >> $GITHUB_ENV
          fi

      - name: Setup GitHub Actions Secrets
        id: secrets
        run: |
          # For each secret that starts with TF_VAR_
          for secret_name in $(echo '${{ toJSON(secrets) }}' | jq -r 'keys[] | select(startswith("TF_VAR_"))'); do
            # Get the secret value using GitHub's context
            secret_value=$(jq -r --arg key "$secret_name" '.[$key]' <<< '${{ toJSON(secrets) }}')
            
            # Mask the secret in logs
            echo "::add-mask::$secret_value"
            
            # Set as environment variable - ensure proper escaping
            echo "$secret_name<<EOF" >> $GITHUB_ENV
            echo "$secret_value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # Also set lowercase version for Terraform (which expects lowercase variables)
            lowercase_name=$(echo "$secret_name" | tr '[:upper:]' '[:lower:]')
            echo "$lowercase_name<<EOF" >> $GITHUB_ENV
            echo "$secret_value" >> $GITHUB_ENV  
            echo "EOF" >> $GITHUB_ENV
          done

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TF_ROOT_PATH }}/${{ env.ENVIRONMENT_PATH }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_ROOT_PATH }}/${{ env.ENVIRONMENT_PATH }}
        run: terraform init -upgrade

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ env.TF_ROOT_PATH }}/${{ env.ENVIRONMENT_PATH }}
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ env.ENVIRONMENT }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15.5'

      - name: Terratest Execution
        if: github.event_name == 'pull_request'
        working-directory: ${{ env.TF_ROOT_PATH }}/tests/terratest
        run: |
          go test . -v timeout 10m

      - name: Terraform Apply Global
        if: github.event_name == 'push' || github.event_name == 'release'
        working-directory: ${{ env.TF_ROOT_PATH }}/${{ env.GLOBAL_PATH }}
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Terraform Apply Environment
        if: (github.event_name == 'push' && env.ENVIRONMENT == 'staging') || (github.event_name == 'release' && env.ENVIRONMENT == 'production')
        working-directory: ${{ env.TF_ROOT_PATH }}/${{ env.ENVIRONMENT_PATH }}
        run: |
          terraform apply -auto-approve
